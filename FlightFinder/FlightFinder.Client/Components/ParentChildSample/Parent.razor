@inherits Blazor.Fluxor.Components.FluxorComponent
@inject IState<Client.Store.ParentChildSample.ParentStore> AppState
@inject Microsoft.JSInterop.IJSRuntime js

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Parent</h3>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <span>@AppState.Value.Parent.ButtonClicked</span>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <ChildGreen ParentData="AppState.Value.Parent"></ChildGreen>
        </div>

        <div class="col">
            <ChildRed ParentData="AppState.Value.Parent"></ChildRed>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code
{ 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("openModal");
        //return base.OnAfterRenderAsync(firstRender);
    }
}
